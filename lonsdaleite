#!/usr/bin/python
# vim: ft=python

import sys, getopt, webbrowser, re, urllib

def usage():
  print("""
  -d  dump graph after parsing
  -c  expect input piped from Clasp's output; conflicts with -i{az}
  -ia  expect input in iClingo's output format with incremental parameters at the beginning of terms; conflicts with -c
  -iz  expect input in iClingo's output format with incremental parameters at the end of terms; conflicts with -c
  -u  construct URL for Google's GraphViz Charts API
  -b  open that URL in the default web browser; implies -u
  """)

def main():
  expectClasp = False
  expectIClingo = False
  incrementalPrefix = True
  constructUrl = False
  showInBrowser = False
  dumpGraph = False

  try:
    opts, args = getopt.getopt(sys.argv[1:], "dcubi:")
  except getopt.GetoptError, err:
    print str(err)
    usage()
    sys.exit(2)  

  for o, a in opts:
    if o == "-d":
      dumpGraph = True
    elif o == "-c":
      if expectIClingo: usage(); sys.exit()
      expectClasp = True
    elif o == "-i" and a == "a":
      if expectClasp: usage(); sys.exit()
      expectIClingo = True
      incrementalPrefix = True
    elif o == "-i" and a == "z":
      if expectClasp: usage(); sys.exit()
      expectIClingo = True
      incrementalPrefix = False
    elif o == "-i":
      usage()
      sys.exit()
    elif o == "-u":
      constructUrl = True
    elif o == "-b":
      showInBrowser = True
      constructUrl = True

  patternSpecs = {
      "type": 1,
      "engine": 1,
      "node": 1,
      "edge": 2,
      "graph_attr": 2,
      "node_attr": 3,
      "edge_attr": 4,
      "global_node_attr": 2,
      "global_edge_attr": 2}

  def stringify_term(t):
    if isinstance(t,str):
      return t
    elif t:
      return "\""+str(t)+"\""
    else:
      return None

  class Parser:
    def __init__(self,f,a,incremental,prefixOrSuffix):
      self.functor = f
      self.arity = a
      self.incremental = incremental
      self.prefixOrSuffix = prefixOrSuffix
      self.start = re.compile(self.functor+"\s*\(")
      self.in_quote = False
    
    def __call__(self, str, *args, **kwargs):
      str = str.strip()
      if not self.start.match(str): return None
      self.groups = [""]
      self.group_path = [0]
      return self.parse_until_end(str[len(self.functor)+1:-1])
    
    def parse_until_end(self,substr):
      #loop through characters in substr.
      for c in substr:
        if self.in_quote:
          if c == '\"':
            self.end_quote()
          else:
            self.extend_current_term(c)
        else:
          if c == '(':
            self.begin_group()
          elif c == ')':
            self.end_group()
          elif c == '\"':
            self.begin_quote()
          elif c == ',':
            self.new_term()
          elif c.isspace():
            continue
          else:
            self.extend_current_term(c)
      stringify_term(self.current_group())
      if self.incremental:
        if self.prefixOrSuffix:
          self.groups.pop(0)
        else:
          self.groups.pop(-1)
        self.group_path[0]-=1
    #  print ("return matches:"+str(self.groups))
      return tuple(self.groups)
    
    def current_group(self,permitTuple=False):
      return self.get_group(self.groups, self.group_path, len(self.group_path), permitTuple)
    
    def parent_group(self,permitTuple=False):
      return self.get_group(self.groups, self.group_path[:-1], len(self.group_path)-1, permitTuple)

    def get_group(self,g,p,n,permitTuple=False):
      if n <= 0: return g
      grp = g[p[-n]]
      if isinstance(grp, tuple):
        return self.get_group(grp if permitTuple else grp[1], p, n-1)
      else:
        return self.get_group(grp, p, n-1)
      
    def begin_group(self):
      self.parent_group()[self.group_path[-1]] = (self.current_group(),[""])
      self.group_path.append(0)
    
    def end_group(self):
      grpTuple = self.parent_group(True)
      self.group_path.pop(-1)
      if grpTuple[0] == "":
        self.parent_group()[self.group_path[-1]] = stringify_term(grpTuple[1])
      else:
        self.parent_group()[self.group_path[-1]] = stringify_term(grpTuple)        
    
    def begin_quote(self):
      self.in_quote = True
      self.extend_current_term("\"")
    
    def end_quote(self):
      self.in_quote = False
      self.extend_current_term("\"")
    
    def new_term(self):
      stringify_term(self.current_group())
      self.parent_group().append("")
      self.group_path[-1]+=1
        
    def extend_current_term(self,c):
      g = self.parent_group()[self.group_path[-1]]
      if g is tuple:
        print("syntax error: non-whitespace character after a functor ended but before the term separator")
        sys.exit()
      self.parent_group()[self.group_path[-1]] = g + str(c)
  
  parsers = {}
  for k, v in patternSpecs.items():
    functor = "graphviz_" + k
    parsers[k] = Parser(functor, v, expectIClingo, incrementalPrefix)

  graph = {}

  for k in patternSpecs.keys():
    graph[k] = []

  graph['type'].append(('graph',))
  graph['engine'].append(('dot',))
  
  def consider(term):
    for k, v in parsers.items():
      matched_terms = v(term)
      if matched_terms:
        #print("match "+str(matched_terms)+" for "+k)
        graph[k].append(matched_terms)
        break

  def considerClaspTerms(termLine):
    terms = termLine.split(" ") # TODO: handle embedded spaces
    for t in terms:
      consider(t)  

  if expectClasp:
    # look for all of the facts on a single line joined by spaces
    for line in sys.stdin.readlines():
      line = line.strip()
      if line and line[0].islower():
        considerClaspTerms(line)
  elif expectIClingo:
    # skip ahead until the last Answer: N\n.(...)\n.
    allLines = sys.stdin.read()
    answerSet = re.compile("(Answer\: [0-9]+\n.*\n)+")
    match = answerSet.match(allLines)
    if match:
      lastSet = match.groups()[-1]
      lastTerms = lastSet.strip().split("\n")[-1]
      considerClaspTerms(lastTerms)
  else:
    # look for one fact per line
    for line in sys.stdin.readlines():
      consider(line.strip())

  def attrs_for_node(nn):
    attrs = filter(lambda attr:attr[0] == nn, graph['node_attr'])
    #print "nn:"+str(nn)
    #print "ext attrs:"+str(graph['node_attr'])
    #print "tl attrs:"+str(attrs)
    ret = {}
    for a in attrs:
      ret[a[1]] = a[2]
    return ret
  def node_ordering(n):
    nn = n[0]
    attrs = attrs_for_node(nn)
#   print "attrs:"+str(attrs)
    order = attrs['node_order'] if 'node_order' in attrs else 0
#    print "node order for "+nn+":"+str(order)
    return order
    
  #re-sort graph['node'] according to whether there's a [node_order=N] attribute
  graph['node'] = sorted(graph['node'], key=node_ordering)

  if dumpGraph:
    print(graph)

  a_list = lambda seq: "[" + (",".join("%s=%s" % kv for kv in seq)) + "]"

  graphType = graph['type'][-1][0]
  connector = "->" if graphType == "digraph" else "--"
  
  graphvizCode = graphType

  graphvizCode += '{'
  
  if graph['graph_attr']:
      graphvizCode += "graph" + a_list(graph['graph_attr'])
      graphvizCode += ';'
  
  if graph['global_node_attr']:
      graphvizCode += "node" + a_list(graph['global_node_attr'])
      graphvizCode += ';'
  
  if graph['global_edge_attr']:
      graphvizCode += "edge" + a_list(graph['global_edge_attr'])
      graphvizCode += ';'
  
  nodes = []
  for (n1,) in graph['node']:
    attrs = [(k,v) for n1t,k,v in graph['node_attr'] if n1t == n1]
    nodes.append(n1 + a_list(attrs) if attrs else n1)
  graphvizCode += ';'.join(nodes)
  graphvizCode += ';'
  
  edges = []
  for (n1,n2) in graph['edge']:
    attrs = [(k,v) for n1t,n2t,k,v in graph['edge_attr'] \
                   if n1t == n1 and n2t == n2]
    edges.append(n1 + connector + n2 + (a_list(attrs) if attrs else ""))
  graphvizCode += ';'.join(edges)

  graphvizCode += '}'

  if constructUrl:
    cht = "gv:%s" % graph['engine'][-1][0]
    chl = graphvizCode
    url = "http://chart.googleapis.com/chart?chl=" + urllib.quote(chl) + "&cht=" + urllib.quote(cht)
    if showInBrowser:
      webbrowser.open(url)
    else:
      print(url)
  else:
    print(graphvizCode)

  
if __name__ == "__main__":
  main()
